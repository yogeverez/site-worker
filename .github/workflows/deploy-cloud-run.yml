name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  PROJECT_ID_DEV: landing-dev-cf5b5
  PROJECT_ID_PROD: landing-aabbb
  SERVICE_NAME: site-worker
  REGION: us-central1
  # These will be populated from GitHub secrets
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  SERPAPI_KEY: ${{ secrets.SERPAPI_KEY }}
  UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
  BING_SEARCH_URL: ${{ secrets.BING_SEARCH_URL }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set environment variables
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            # Default to dev for regular pushes
            ENV="dev"
          fi
          
          if [[ "$ENV" == "prod" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ env.PROJECT_ID_PROD }}" >> $GITHUB_ENV
            echo "SA_KEY=GCP_SA_KEY_PROD" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "PROJECT_ID=${{ env.PROJECT_ID_DEV }}" >> $GITHUB_ENV
            echo "SA_KEY=GCP_SA_KEY_DEV" >> $GITHUB_ENV
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
      
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets[env.SA_KEY] }}
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      
      - name: Build and push Docker image
        id: build_step
        run: |
          echo "Starting build with gcloud builds submit..."
          gcloud builds submit \
            --tag gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --suppress-logs \
            --async

          # Verify the image was created
          echo "Verifying image was created..."
          gcloud container images list-tags "gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}" --limit=5

          echo "build_status=success" >> $GITHUB_OUTPUT

      - name: Wait for Image in GCR
        if: steps.build_step.outputs.build_status == 'success'
        shell: bash
        run: |
          IMAGE_URI="gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          echo "Waiting for image $IMAGE_URI to be available..."
          for i in {1..12}; do # Try for 12 times (12 * 10s = 2 minutes)
            if gcloud container images describe "$IMAGE_URI" --format='value(name)' > /dev/null 2>&1; then
              echo "Image $IMAGE_URI found."
              exit 0
            fi
            echo "Attempt $i: Image $IMAGE_URI not found yet. Waiting 10 seconds..."
            sleep 10
          done
          echo "Error: Image $IMAGE_URI not found after 2 minutes."
          exit 1
      
      - name: Deploy to Cloud Run
        if: steps.build_step.outputs.build_status == 'success'
        run: |
          # Escape commas in environment variables to avoid gcloud substitution issues
          OPENAI_API_KEY=$(echo "${{ env.OPENAI_API_KEY }}" | sed 's/,/\\,/g')
          SERPAPI_KEY=$(echo "${{ env.SERPAPI_KEY }}" | sed 's/,/\\,/g')
          UNSPLASH_ACCESS_KEY=$(echo "${{ env.UNSPLASH_ACCESS_KEY }}" | sed 's/,/\\,/g')
          BING_SEARCH_URL=$(echo "${{ env.BING_SEARCH_URL }}" | sed 's/,/\\,/g')
          
          echo "Deploying to Cloud Run..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --memory 1Gi \
            --set-env-vars="OPENAI_API_KEY=${OPENAI_API_KEY},SERPAPI_KEY=${SERPAPI_KEY},UNSPLASH_ACCESS_KEY=${UNSPLASH_ACCESS_KEY},BING_SEARCH_URL=${BING_SEARCH_URL}" \
            --service-account=${{ env.PROJECT_ID }}@appspot.gserviceaccount.com \
            --allow-unauthenticated

          echo "Deployment completed."

      - name: Show Output
        if: steps.build_step.outputs.build_status == 'success'
        run: |
          echo "Deployed to Cloud Run service ${{ env.SERVICE_NAME }} in region ${{ env.REGION }}"
          gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)'

      - name: Debug on Failure
        if: failure()
        run: |
          echo "Debug information on failure:"
          echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "SERVICE_NAME: ${{ env.SERVICE_NAME }}"
          echo "GITHUB_SHA: ${{ github.sha }}"
          echo "Checking if image exists:"
          gcloud container images list-tags "gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}" --limit=5 || echo "Failed to list images"
      
      - name: Set up Pub/Sub (first deployment only)
        if: ${{ steps.set-env.outputs.environment == 'dev' }}
        run: |
          # Check if topic exists, create if not
          if ! gcloud pubsub topics describe site-generation-jobs 2>/dev/null; then
            gcloud pubsub topics create site-generation-jobs
          fi
          
          # Get the service URL
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')
          
          # Check if subscription exists, create if not
          if ! gcloud pubsub subscriptions describe site-worker-sub 2>/dev/null; then
            gcloud pubsub subscriptions create site-worker-sub \
              --topic site-generation-jobs \
              --push-endpoint=${SERVICE_URL}/ \
              --push-auth-service-account=${{ env.PROJECT_ID }}@appspot.gserviceaccount.com
          fi
